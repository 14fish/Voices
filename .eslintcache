[{"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/index.js":"1","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/App.js":"2","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/index.js":"3","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Voices/index.js":"4","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Card/index.js":"5","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/index.js":"6","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/recorder.js":"7","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/Recorder-package.js":"8"},{"size":220,"mtime":1607502592841,"results":"9","hashOfConfig":"10"},{"size":3590,"mtime":1607426744523,"results":"11","hashOfConfig":"10"},{"size":101,"mtime":1607418886214,"results":"12","hashOfConfig":"10"},{"size":374,"mtime":1607421945547,"results":"13","hashOfConfig":"10"},{"size":1019,"mtime":1607426699758,"results":"14","hashOfConfig":"10"},{"size":1827,"mtime":1607422685956,"results":"15","hashOfConfig":"10"},{"size":6068,"mtime":1607421611499,"results":"16","hashOfConfig":"10"},{"size":16970,"mtime":1607421742435,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"c4rzyq",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"38","usedDeprecatedRules":"22"},"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/index.js",[],"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/App.js",[],["39","40"],"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/index.js",[],"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Voices/index.js",[],"/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Card/index.js",["41","42"],"import React, { useRef, useEffect, useState } from 'react';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nimport './index.css';\n\nexport const Card = ({ texts, setSliderRef, setSlideIndex }) => {\n  const slider = useRef(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);\n\n  let settings = {\n    dots: true,\n    beforeChange: (current, next) => {\n      setCurrentSlideIndex(next);\n    },\n  };\n\n  useEffect(() => {\n    setSlideIndex(currentSlideIndex)\n  }, [currentSlideIndex])\n\n  useEffect(() => {\n    if (slider) {\n      setSliderRef(slider.current);\n    }\n  }, [slider]);\n\n  // Geri qayitmaq zad\n  // Slider.current.slickGoTo(1);\n\n  return (\n    <>\n      <Slider {...settings} ref={slider} touchMove={false} easing={'linear'}>\n        {texts &&\n          texts.map(({ desc, id }) => (\n            <div className='slider-item' key={id}>\n              {desc}\n            </div>\n          ))}\n      </Slider>\n    </>\n  );\n};\n","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/index.js",["43","44"],"import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport {\n  getElementArray,\n  pauseRecording,\n  startRecording,\n  stopRecording,\n} from './recorder.js';\nimport './index.css';\n\nconst useStyle = makeStyles({\n  container: {\n    display: 'flex',\n    width: '100%',\n    flexDirection: 'column',\n    justifyContent: 'space-around',\n    textAlign: 'center',\n  },\n  record: {\n    width: '20%',\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '0 auto',\n  },\n  skip: {},\n});\n\nexport const Record = ({ state, setState, nextSlide, prevSlide }) => {\n  const { container, record, skip } = useStyle();\n\n  const onClickStop = () => {\n    stopRecording().then(() => {\n      console.log('stopRecording');\n      setState({\n        ...state,\n        voices: [...getElementArray()],\n      });\n    });\n  };\n\n  return (\n    <Grid item container className={container}>\n      <div className={`${record}`}>\n        <Button\n          onClick={pauseRecording}\n          variant='contained'\n          color='secondary'\n          id='pauseButton'\n        >\n          Pause\n        </Button>\n        <Button\n          onClick={startRecording}\n          variant='contained'\n          color='primary'\n          id='recordButton'\n        >\n          Record\n        </Button>\n        <Button\n          onClick={() => {\n            onClickStop();\n            nextSlide();\n          }}\n          variant='contained'\n          color='secondary'\n          id='stopButton'\n        >\n          Stop\n        </Button>\n      </div>\n      <div className={skip}>\n        <Button onClick={nextSlide} variant='outlined' color='primary'>\n          Skip\n        </Button>\n      </div>\n    </Grid>\n  );\n};\n","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/recorder.js",["45"],"import Recorder from \"./Recorder-package.js\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\n\nlet nodeElementArray = [];\n//webkitURL is deprecated but nevertheless\nlet URL = window.URL || window.webkitURL;\nlet gumStream; //stream from getUserMedia()\nlet rec; //Recorder.js object\nlet input; //MediaStreamAudioSourceNode we'll be recording\n\n// shim for AudioContext when it's not avb.\nlet AudioContext = window.AudioContext || window.webkitAudioContext;\nlet audioContext; //audio context to help us record\n\nlet recordButton;\nlet stopButton;\nlet pauseButton;\n\nwindow.onload = () => {\n  recordButton = document.getElementById(\"recordButton\");\n  stopButton = document.getElementById(\"stopButton\");\n  pauseButton = document.getElementById(\"pauseButton\");\n};\n// //add events to those 2 buttons\n// recordButton.addEventListener(\"click\", startRecording);\n// stopButton.addEventListener(\"click\", stopRecording);\n// pauseButton.addEventListener(\"click\", pauseRecording);\n\nexport const startRecording = () => {\n  // console.log(\"recordButton clicked\");\n\n  /*\n    Simple constraints object, for more advanced audio features see\n    https://addpipe.com/blog/audio-constraints-getusermedia/\n  */\n\n  let constraints = { audio: true, video: false };\n\n  /*\n    Disable the record button until we get a success or fail from getUserMedia() \n  */\n\n  recordButton.disabled = true;\n  stopButton.disabled = false;\n  pauseButton.disabled = false;\n\n  /*\n      We're using the standard promise based getUserMedia() \n      https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n  */\n\n  navigator.mediaDevices\n    .getUserMedia(constraints)\n    .then(function (stream) {\n      // console.log(\n      //   \"getUserMedia() success, stream created, initializing Recorder.js ...\"\n      // );\n\n      /*\n      create an audio context after getUserMedia is called\n      sampleRate might change after getUserMedia is called, like it does on macOS when recording through AirPods\n      the sampleRate defaults to the one set in your OS for your playback device\n\n    */\n      audioContext = new AudioContext();\n\n      //update the format\n      // document.getElementById(\"formats\").innerHTML =\n      //   \"Format: 1 channel pcm @ \" + audioContext.sampleRate / 1000 + \"kHz\";\n\n      /*  assign to gumStream for later use  */\n      gumStream = stream;\n      // console.log(gumStream)\n\n      /* use the stream */\n      input = audioContext.createMediaStreamSource(stream);\n      // console.log(input);\n\n      /* \n      Create the Recorder object and configure to record mono sound (1 channel)\n      Recording 2 channels  will double the file size\n    */\n      rec = new Recorder(input, { numChannels: 1 });\n\n      //start the recording process\n      rec.record();\n\n      // console.log(\"Recording started\");\n    })\n    .catch(function (err) {\n      //enable the record button if getUserMedia() fails\n      console.log(err);\n      recordButton.disabled = false;\n      stopButton.disabled = true;\n      pauseButton.disabled = true;\n    });\n};\n\nexport const pauseRecording = () => {\n  // console.log(\"pauseButton clicked rec.recording=\", rec.recording);\n  if (rec.recording) {\n    //pause\n    rec.stop();\n    pauseButton.innerHTML = \"Resume\";\n  } else {\n    //resume\n    rec.record();\n    pauseButton.innerHTML = \"Pause\";\n  }\n};\n\nexport const stopRecording = () => {\n  // console.log(\"stopButton clicked\");\n\n  //disable the stop button, enable the record too allow for new recordings\n  stopButton.disabled = true;\n  recordButton.disabled = false;\n  pauseButton.disabled = true;\n\n  //reset button just in case the recording is stopped while paused\n  pauseButton.innerHTML = \"Pause\";\n\n  //tell the recorder to stop the recording\n  rec.stop();\n\n  //stop microphone access\n  gumStream.getAudioTracks()[0].stop();\n  // console.log(gumStream.getAudioTracks()[0]);\n\n  //create the wav blob and pass it on to createDownloadLink\n  return new Promise(function (resolve, reject) {\n    rec.exportWAV((blob) => {\n      createDownloadLink(blob);\n      return resolve();\n    });\n  });\n  \n};\n\nconst createDownloadLink = (blob) => {\n  let url = URL.createObjectURL(blob);\n  let au = document.createElement(\"audio\");\n  let li = document.createElement(\"li\");\n  let link = document.createElement(\"a\");\n  let downloadIcon = document.createElement(\"i\");\n  downloadIcon.classList.add(\"fas\", \"fa-arrow-down\");\n  link.appendChild(downloadIcon);\n\n  //name of .wav file to use during upload and download (without extendion)\n  let filename = new Date().toISOString();\n\n  //add controls to the <audio> element\n  au.controls = true;\n  au.src = url;\n  au.classList.add(\"audio-link\");\n\n  //save to disk link\n  link.href = url;\n  link.download = filename + \".wav\"; //download forces the browser to donwload the file using the  filename\n  link.classList.add(\"download-link\");\n  // link.innerHTML = \"Save to disk\";\n  // link.appendChild();\n\n  //add the new audio element to li\n  li.appendChild(au);\n\n  //add the filename to the li\n  // li.appendChild(document.createTextNode(filename + \".wav \"));\n\n  //add the save to disk link to li\n  li.appendChild(link);\n\n  //upload link\n  // let upload = document.createElement(\"a\");\n  // upload.href = \"#\";\n  // upload.innerHTML = \"Upload\";\n  // upload.addEventListener(\"click\", function (event) {\n  //   let xhr = new XMLHttpRequest();\n  //   xhr.onload = function (e) {\n  //     if (this.readyState === 4) {\n  //       console.log(\"Server returned: \", e.target.responseText);\n  //     }\n  //   };\n  //   let fd = new FormData();\n  //   fd.append(\"audio_data\", blob, filename);\n  //   xhr.open(\"POST\", \"upload.php\", true);\n  //   xhr.send(fd);\n  // });\n  // li.appendChild(document.createTextNode(\" \")); //add a space in between\n  // li.appendChild(upload); //add the upload link to li\n\n  //add the li element to the state\n  return nodeElementArray.push(li);\n};\n\nexport const getElementArray = () => {\n  let voices = [];\n\n  let id = 0;\n  nodeElementArray.forEach((el) => {\n    voices.push({\n      id,\n      src: el,\n    });\n    id++;\n  });\n\n  // console.log('aa');\n  return voices;\n};\n","/Users/hdsv/Desktop/bank/Credit Risk/common-voice/src/components/Record/Recorder-package.js",["46","47","48","49","50"],"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  // eslint-disable-next-line no-undef\n  } else if (typeof define === \"function\" && define.amd) {\n    // eslint-disable-next-line no-undef\n    define([], f);\n  } else {\n    var g;\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    // eslint-disable-next-line no-restricted-globals\n    } else if (typeof self !== \"undefined\") {\n      // eslint-disable-next-line no-restricted-globals\n      g = self;\n    } else {\n      g = this;\n    }\n    g.Recorder = f();\n  }\n})(function () {\n  // eslint-disable-next-line no-unused-vars\n  var define, module, exports;\n  return (function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw ((f.code = \"MODULE_NOT_FOUND\"), f);\n        }\n        var l = (n[o] = { exports: {} });\n        t[o][0].call(\n          l.exports,\n          function (e) {\n            var n = t[o][1][e];\n            return s(n ? n : e);\n          },\n          l,\n          l.exports,\n          e,\n          t,\n          n,\n          r\n        );\n      }\n      return n[o].exports;\n    }\n    var i = typeof require == \"function\" && require;\n    for (var o = 0; o < r.length; o++) s(r[o]);\n    return s;\n  })(\n    {\n      1: [\n        function (require, module, exports) {\n          \"use strict\";\n\n          module.exports = require(\"./recorder\").Recorder;\n        },\n        { \"./recorder\": 2 },\n      ],\n      2: [\n        function (require, module, exports) {\n          \"use strict\";\n\n          var _createClass = (function () {\n            function defineProperties(target, props) {\n              for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n              }\n            }\n            return function (Constructor, protoProps, staticProps) {\n              if (protoProps)\n                defineProperties(Constructor.prototype, protoProps);\n              if (staticProps) defineProperties(Constructor, staticProps);\n              return Constructor;\n            };\n          })();\n\n          Object.defineProperty(exports, \"__esModule\", {\n            value: true,\n          });\n          exports.Recorder = undefined;\n\n          var _inlineWorker = require(\"inline-worker\");\n\n          var _inlineWorker2 = _interopRequireDefault(_inlineWorker);\n\n          function _interopRequireDefault(obj) {\n            return obj && obj.__esModule ? obj : { default: obj };\n          }\n\n          function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n              throw new TypeError(\"Cannot call a class as a function\");\n            }\n          }\n\n          var Recorder = (exports.Recorder = (function () {\n            function Recorder(source, cfg) {\n              var _this = this;\n\n              _classCallCheck(this, Recorder);\n\n              this.config = {\n                bufferLen: 4096,\n                numChannels: 2,\n                mimeType: \"audio/wav\",\n              };\n              this.recording = false;\n              this.callbacks = {\n                getBuffer: [],\n                exportWAV: [],\n              };\n\n              Object.assign(this.config, cfg);\n              this.context = source.context;\n              this.node = (\n                this.context.createScriptProcessor ||\n                this.context.createJavaScriptNode\n              ).call(\n                this.context,\n                this.config.bufferLen,\n                this.config.numChannels,\n                this.config.numChannels\n              );\n\n              this.node.onaudioprocess = function (e) {\n                if (!_this.recording) return;\n\n                var buffer = [];\n                for (\n                  var channel = 0;\n                  channel < _this.config.numChannels;\n                  channel++\n                ) {\n                  buffer.push(e.inputBuffer.getChannelData(channel));\n                }\n                _this.worker.postMessage({\n                  command: \"record\",\n                  buffer: buffer,\n                });\n              };\n\n              source.connect(this.node);\n              this.node.connect(this.context.destination); //this should not be necessary\n\n              var self = {};\n              this.worker = new _inlineWorker2.default(function () {\n                var recLength = 0,\n                  recBuffers = [],\n                  sampleRate = undefined,\n                  numChannels = undefined;\n\n                self.onmessage = function (e) {\n                  switch (e.data.command) {\n                    case \"init\":\n                      init(e.data.config);\n                      break;\n                    case \"record\":\n                      record(e.data.buffer);\n                      break;\n                    case \"exportWAV\":\n                      exportWAV(e.data.type);\n                      break;\n                    case \"getBuffer\":\n                      getBuffer();\n                      break;\n                    case \"clear\":\n                      clear();\n                      break;\n                  }\n                };\n\n                function init(config) {\n                  sampleRate = config.sampleRate;\n                  numChannels = config.numChannels;\n                  initBuffers();\n                }\n\n                function record(inputBuffer) {\n                  for (var channel = 0; channel < numChannels; channel++) {\n                    recBuffers[channel].push(inputBuffer[channel]);\n                  }\n                  recLength += inputBuffer[0].length;\n                }\n\n                function exportWAV(type) {\n                  var buffers = [];\n                  for (var channel = 0; channel < numChannels; channel++) {\n                    buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                  }\n                  var interleaved = undefined;\n                  if (numChannels === 2) {\n                    interleaved = interleave(buffers[0], buffers[1]);\n                  } else {\n                    interleaved = buffers[0];\n                  }\n                  var dataview = encodeWAV(interleaved);\n                  var audioBlob = new Blob([dataview], { type: type });\n\n                  self.postMessage({ command: \"exportWAV\", data: audioBlob });\n                }\n\n                function getBuffer() {\n                  var buffers = [];\n                  for (var channel = 0; channel < numChannels; channel++) {\n                    buffers.push(mergeBuffers(recBuffers[channel], recLength));\n                  }\n                  self.postMessage({ command: \"getBuffer\", data: buffers });\n                }\n\n                function clear() {\n                  recLength = 0;\n                  recBuffers = [];\n                  initBuffers();\n                }\n\n                function initBuffers() {\n                  for (var channel = 0; channel < numChannels; channel++) {\n                    recBuffers[channel] = [];\n                  }\n                }\n\n                function mergeBuffers(recBuffers, recLength) {\n                  var result = new Float32Array(recLength);\n                  var offset = 0;\n                  for (var i = 0; i < recBuffers.length; i++) {\n                    result.set(recBuffers[i], offset);\n                    offset += recBuffers[i].length;\n                  }\n                  return result;\n                }\n\n                function interleave(inputL, inputR) {\n                  var length = inputL.length + inputR.length;\n                  var result = new Float32Array(length);\n\n                  var index = 0,\n                    inputIndex = 0;\n\n                  while (index < length) {\n                    result[index++] = inputL[inputIndex];\n                    result[index++] = inputR[inputIndex];\n                    inputIndex++;\n                  }\n                  return result;\n                }\n\n                function floatTo16BitPCM(output, offset, input) {\n                  for (var i = 0; i < input.length; i++, offset += 2) {\n                    var s = Math.max(-1, Math.min(1, input[i]));\n                    output.setInt16(\n                      offset,\n                      s < 0 ? s * 0x8000 : s * 0x7fff,\n                      true\n                    );\n                  }\n                }\n\n                function writeString(view, offset, string) {\n                  for (var i = 0; i < string.length; i++) {\n                    view.setUint8(offset + i, string.charCodeAt(i));\n                  }\n                }\n\n                function encodeWAV(samples) {\n                  var buffer = new ArrayBuffer(44 + samples.length * 2);\n                  var view = new DataView(buffer);\n\n                  /* RIFF identifier */\n                  writeString(view, 0, \"RIFF\");\n                  /* RIFF chunk length */\n                  view.setUint32(4, 36 + samples.length * 2, true);\n                  /* RIFF type */\n                  writeString(view, 8, \"WAVE\");\n                  /* format chunk identifier */\n                  writeString(view, 12, \"fmt \");\n                  /* format chunk length */\n                  view.setUint32(16, 16, true);\n                  /* sample format (raw) */\n                  view.setUint16(20, 1, true);\n                  /* channel count */\n                  view.setUint16(22, numChannels, true);\n                  /* sample rate */\n                  view.setUint32(24, sampleRate, true);\n                  /* byte rate (sample rate * block align) */\n                  view.setUint32(28, sampleRate * 4, true);\n                  /* block align (channel count * bytes per sample) */\n                  view.setUint16(32, numChannels * 2, true);\n                  /* bits per sample */\n                  view.setUint16(34, 16, true);\n                  /* data chunk identifier */\n                  writeString(view, 36, \"data\");\n                  /* data chunk length */\n                  view.setUint32(40, samples.length * 2, true);\n\n                  floatTo16BitPCM(view, 44, samples);\n\n                  return view;\n                }\n              }, self);\n\n              this.worker.postMessage({\n                command: \"init\",\n                config: {\n                  sampleRate: this.context.sampleRate,\n                  numChannels: this.config.numChannels,\n                },\n              });\n\n              this.worker.onmessage = function (e) {\n                var cb = _this.callbacks[e.data.command].pop();\n                if (typeof cb == \"function\") {\n                  cb(e.data.data);\n                }\n              };\n            }\n\n            _createClass(\n              Recorder,\n              [\n                {\n                  key: \"record\",\n                  value: function record() {\n                    this.recording = true;\n                  },\n                },\n                {\n                  key: \"stop\",\n                  value: function stop() {\n                    this.recording = false;\n                  },\n                },\n                {\n                  key: \"clear\",\n                  value: function clear() {\n                    this.worker.postMessage({ command: \"clear\" });\n                  },\n                },\n                {\n                  key: \"getBuffer\",\n                  value: function getBuffer(cb) {\n                    cb = cb || this.config.callback;\n                    if (!cb) throw new Error(\"Callback not set\");\n\n                    this.callbacks.getBuffer.push(cb);\n\n                    this.worker.postMessage({ command: \"getBuffer\" });\n                  },\n                },\n                {\n                  key: \"exportWAV\",\n                  value: function exportWAV(cb, mimeType) {\n                    mimeType = mimeType || this.config.mimeType;\n                    cb = cb || this.config.callback;\n                    if (!cb) throw new Error(\"Callback not set\");\n\n                    this.callbacks.exportWAV.push(cb);\n\n                    this.worker.postMessage({\n                      command: \"exportWAV\",\n                      type: mimeType,\n                    });\n                  },\n                },\n              ],\n              [\n                {\n                  key: \"forceDownload\",\n                  value: function forceDownload(blob, filename) {\n                    var url = (window.URL || window.webkitURL).createObjectURL(\n                      blob\n                    );\n                    var link = window.document.createElement(\"a\");\n                    link.href = url;\n                    link.download = filename || \"output.wav\";\n                    var click = document.createEvent(\"Event\");\n                    click.initEvent(\"click\", true, true);\n                    link.dispatchEvent(click);\n                  },\n                },\n              ]\n            );\n\n            return Recorder;\n          })());\n\n          exports.default = Recorder;\n        },\n        { \"inline-worker\": 3 },\n      ],\n      3: [\n        function (require, module, exports) {\n          \"use strict\";\n\n          module.exports = require(\"./inline-worker\");\n        },\n        { \"./inline-worker\": 4 },\n      ],\n      4: [\n        function (require, module, exports) {\n          (function (global) {\n            \"use strict\";\n\n            var _createClass = (function () {\n              function defineProperties(target, props) {\n                for (var key in props) {\n                  var prop = props[key];\n                  prop.configurable = true;\n                  if (prop.value) prop.writable = true;\n                }\n                Object.defineProperties(target, props);\n              }\n              return function (Constructor, protoProps, staticProps) {\n                if (protoProps)\n                  defineProperties(Constructor.prototype, protoProps);\n                if (staticProps) defineProperties(Constructor, staticProps);\n                return Constructor;\n              };\n            })();\n\n            var _classCallCheck = function (instance, Constructor) {\n              if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n              }\n            };\n\n            var WORKER_ENABLED = !!(\n              global === global.window &&\n              global.URL &&\n              global.Blob &&\n              global.Worker\n            );\n\n            var InlineWorker = (function () {\n              function InlineWorker(func, self) {\n                var _this = this;\n\n                _classCallCheck(this, InlineWorker);\n\n                if (WORKER_ENABLED) {\n                  var functionBody = func\n                    .toString()\n                    .trim()\n                    .match(/^function\\s*\\w*\\s*\\([\\w\\s,]*\\)\\s*{([\\w\\W]*?)}$/)[1];\n                  var url = global.URL.createObjectURL(\n                    new global.Blob([functionBody], { type: \"text/javascript\" })\n                  );\n\n                  return new global.Worker(url);\n                }\n\n                this.self = self;\n                this.self.postMessage = function (data) {\n                  setTimeout(function () {\n                    _this.onmessage({ data: data });\n                  }, 0);\n                };\n\n                setTimeout(function () {\n                  func.call(self);\n                }, 0);\n              }\n\n              _createClass(InlineWorker, {\n                postMessage: {\n                  value: function postMessage(data) {\n                    var _this = this;\n\n                    setTimeout(function () {\n                      _this.self.onmessage({ data: data });\n                    }, 0);\n                  },\n                },\n              });\n\n              return InlineWorker;\n            })();\n\n            module.exports = InlineWorker;\n          }.call(\n            this,\n            typeof global !== \"undefined\"\n              ? global\n              // eslint-disable-next-line no-restricted-globals\n              : typeof self !== \"undefined\"\n              // eslint-disable-next-line no-restricted-globals\n              ? self\n              : typeof window !== \"undefined\"\n              ? window\n              : {}\n          ));\n        },\n        {},\n      ],\n    },\n    {},\n    [1]\n  )(1);\n});\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":20,"column":6,"nodeType":"57","endLine":20,"endColumn":25,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":26,"column":6,"nodeType":"57","endLine":26,"endColumn":14,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"65","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"66","line":2,"column":8,"nodeType":"63","messageId":"64","endLine":2,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":60,"column":11,"nodeType":"69","messageId":"70","endLine":60,"endColumn":24,"fix":"71"},{"ruleId":"67","severity":1,"message":"68","line":68,"column":11,"nodeType":"69","messageId":"70","endLine":68,"endColumn":24,"fix":"72"},{"ruleId":"73","severity":1,"message":"74","line":164,"column":19,"nodeType":"75","messageId":"76","endLine":180,"endColumn":20},{"ruleId":"67","severity":1,"message":"68","line":403,"column":11,"nodeType":"69","messageId":"70","endLine":403,"endColumn":24,"fix":"77"},{"ruleId":"67","severity":1,"message":"68","line":412,"column":13,"nodeType":"69","messageId":"70","endLine":412,"endColumn":26,"fix":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSlideIndex'. Either include it or remove the dependency array. If 'setSlideIndex' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'setSliderRef'. Either include it or remove the dependency array. If 'setSliderRef' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["82"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'GetAppIcon' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"83","text":"84"},{"range":"85","text":"84"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"86","text":"84"},{"range":"87","text":"84"},"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},[1615,1628],"",[1805,1818],[13722,13735],[13946,13959],"Update the dependencies array to be: [currentSlideIndex, setSlideIndex]",{"range":"92","text":"93"},"Update the dependencies array to be: [setSliderRef, slider]",{"range":"94","text":"95"},[551,570],"[currentSlideIndex, setSlideIndex]",[658,666],"[setSliderRef, slider]"]